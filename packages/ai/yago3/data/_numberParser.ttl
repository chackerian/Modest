# This is a hand-coded file!
# Do not overwrite!
# The order of rules matters!

# This file is part of the YAGO project at the Max Planck Institute
# for Informatics/Germany and Télécom ParisTech University/France:
# http://yago-knowledge.org

# This file is copyright 2016 Thomas Rebele, with contributions from Fabian M. Suchanek.

# YAGO is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.

# YAGO is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.

# You should have received a copy of the GNU General Public License
# along with YAGO.  If not, see <http://www.gnu.org/licenses/>.

# Remove coordinates (extracted by CoordinateExtractor)
"\{\{coord[^}]*\}\}" <mapsTo> " " .

# Normalize spaces and underbars
"[ \t\n\u00A0\u202F\uFEFF_]++" <mapsTo> " " .

# Remove commas (in order of decreasing length; necessary because patterns cannot overlap)
"(\d),(\d{3}),(\d{3}),(\d{3}),(\d{3})"	<mapsTo>	"$1$2$3$4$5" .
"(\d),(\d{3}),(\d{3}),(\d{3})"	<mapsTo>	"$1$2$3$4" .
"(\d),(\d{3}),(\d{3})"	<mapsTo>	"$1$2$3" .
"(\d),(\d{3})"	<mapsTo>	"$1$2" .

# Translate the remaining commas to dots (for German)
"(\d),(\d)"	<mapsTo>	"$1.$2" .

# Remove spaces (for Polish; in order of decreasing length)
"\\b(\d{1,3}) (\d{3}) (\d{3}) (\d{3})\\b"	<mapsTo>	"$1$2$3$4" .
"\\b(\d{1,3}) (\d{3}) (\d{3})\\b"	<mapsTo>	"$1$2$3" .
"\\b(\d{1,3}) (\d{3})\\b"	<mapsTo>	"$1$2" .

# Remove dots (for German; in order of decreasing length)
"\\b(\d{1,3})\.(\d{3})\.(\d{3})\.(\d{3})\\b"	<mapsTo>	"$1$2$3$4" .
"\\b(\d{1,3})\.(\d{3})\.(\d{3})\\b"	<mapsTo>	"$1$2$3" .

# Remove number suffixes (otherwise "th" maps to "thousand hours")
"(\d)(th|rd|st)"	<mapsTo>	"$1" .

# Define numbers
"-?\d++(\.\d++)?+(E-?\d++)?+" <mapsTo> "_number_$0_"	.	
		
# textual numbers, US, Canada and modern British, short scale;
# compare http_//en.wikipedia.org/wiki/Names_of_large_numbers#Extensions_of_the_standard_dictionary_numbers
"hundreds?" <mapsTo> "_numberName_100_" .
"thousands?" <mapsTo> "_numberName_1000_" .
"millions?"  <mapsTo>  "_numberName_1E6_" .
"mil"  <mapsTo>  "_numberName_1E6_" .
"billions?" <mapsTo> "_numberName_1E9_" .
"trillions?"   <mapsTo> "_numberName_1E12_" .
"quadrillions?"  <mapsTo> "_numberName_1E15_" .
"quintillions?" <mapsTo> "_numberName_1E18_" .
"sextillions?"   <mapsTo> "_numberName_1E21_" .
"septillions?"   <mapsTo> "_numberName_1E24_" .
"octillions?"   <mapsTo> "_numberName_1E27_" .
		
"_number_([^_]++)_ ?_numberName_([^_]++)_" <mapsTo> "_number_$1*$2_" .

# time duration				
"\{\{duration\|h=_number_([^_]++)_\|m=_number_([^_]++)_\|s=_number_([^_]++)_\}\}" <mapsTo> "_number_$1*3600+$2*60+$3_ s " .
"\{\{duration\|m=_number_([^_]++)_\|s=_number_([^_]++)_\}\}" <mapsTo> "_number_$1*60+$2_ s " .
"(\d+):(\d{2}):(\d{2})" <mapsTo> "_number_$3*3600+$2*60+$3_ s " .
"(\d+):(\d{2})" <mapsTo> "_number_$1*60+$2_ s " .


# latitude / longitude
"_number_([^_]++)_ degrees _number_([^_]++)_ minutes _number_([^_]++)_ seconds (N|E)" <mapsTo> " " .
"_number_([^_]++)_ degrees _number_([^_]++)_ minutes _number_([^_]++)_ seconds (S|W)" <mapsTo> " " .

# quantities

# units
"metres\\b" <mapsTo> "_unit_m_1_" .
"km²" <mapsTo> "_unit_m^2_1E6_" .
"m\^?_number_2_" <mapsTo>  "_unit_m2_1_" .
"m\^?_number_3_" <mapsTo> "_unit_m3_1_" .
"k_unit_m\^2_1_\\b"  <mapsTo> "_unit_m2_1E6_" . # the exponent is different for square meters than for meters
"k_unit_m\^3_1_\\b"  <mapsTo> "_unit_m3_1E9_" . # the exponent is different for cubic meters than for meters

"(?<!_unit_)m\\b" <mapsTo> "_unit_m_1_" . # Negative lookahead to avoid replacing an "m" that is already a unit
"s\\b" <mapsTo> "_unit_s_1_" .
"g\\b" <mapsTo> "_unit_g_1_" .
"px\\b" <mapsTo> "_unit_px_1_" .
"minutes?\\b|min\\b" <mapsTo> "_unit_s_60_" .
"h\\b" <mapsTo> "_unit_s_3600_" .
			
"km/h" <mapsTo> "_unit_m/s_0.277777777777777_" .
"km/s" <mapsTo> "_unit_m/s_1000_" .

# SI prefixes, compare http_//en.wikipedia.org/wiki/Metric_prefix		
"T_unit_([^_]++)_([^_]++)_" <mapsTo> "_unit_$1_$2*1E12_" .
"G_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E9_" .
"(?-i)M_unit_([^_]++)_([^_]++)_" <mapsTo>  "_unit_$1_$2*1E6_" .
"k_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E3_" .
"h_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E2_" .
"da_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E1_" .
"d_unit_([^_]++)_([^_]++)_" <mapsTo>  "_unit_$1_$2*1E-1_" .
"c_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E-2_" .
"m_unit_([^_]++)_([^_]++)_" <mapsTo>  "_unit_$1_$2*1E-3_" .
"μ_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E-6_" .
"n_unit_([^_]++)_([^_]++)_"  <mapsTo>  "_unit_$1_$2*1E-9_" .
"p_unit_([^_]++)_([^_]++)_" <mapsTo>  "_unit_$1_$2*1E-12_" .

# Free Wikipedia-specific expressions such as  {{val|6378.1|u=km}}
"\{\{val\|_number_([^_]++)_\|e=_number_([^_]++)_\|ul?=_unit_([^_]++)_([^_]++)_\}\}" <mapsTo> "_number_$1E$2_ _unit_$3_$4_" .
"\{\{convert\|_number_([^_]++)_\|_unit_([^_]++)_([^_]++)_\|" <mapsTo> "_number_$1_ _unit_$2_$3_" .
"\{\{val\|_number_([^_]++)_\|ul?=_unit_([^_]++)_([^_]++)_\}\}" <mapsTo> "_number_$1_ _unit_$2_$3_" .
"_number_([^_]++)_ ?\[\[_unit_([^_]++)_([^_]++)_\]\]" <mapsTo> "_number_$1_ _unit_$2_$3_" .

# Final mapping for numbers with units
"_number_([^_]++)_ ?_unit_([^_]++)_([^_]++)_"	<mapsTo> "_number_$1*$3_ _bunit_$2_" .
"_number_([^_]++)_ ?_bunit_([^_]++)_"	<mapsTo> "_result_$1_<$2>_" .

# currencies. Put words before symbols, because otherwise the patterns will apply twice.
"dollars?" <mapsTo> "_currencyName_dollar_" .
"euros?" <mapsTo> "_currencyName_euro_" .
"yen" <mapsTo> "_currencyName_yen_" .
"pounds?" <mapsTo> "_currencyName_pound_" .
"gbp" <mapsTo> "_currencyName_pound_" .
"\$" <mapsTo> "_currencyName_dollar_" .
"€" <mapsTo> "_currencyName_euro_" .
"¥" <mapsTo> "_currencyName_yen_" .
"£" <mapsTo> "_currencyName_pound_" .
"₤" <mapsTo> "_currencyName_pound_" .

"_currencyName_([^_]++)_ ?_result_([^_]++)_<m>" <mapsTo> "_result_$2*1E6_<$1>_" .		
"_currencyName_([^_]++)_ ?_number_([^_]++)_B" <mapsTo> "_result_$2*1E9_<$1>_" .		
"_number_([^_]++)_ ?_currencyName_([^_]++)_" <mapsTo> "_result_$1_<$2>_" .
"_currencyName_([^_]++)_ ?_number_([^_]++)_" <mapsTo> "_result_$2_<$1>_" .		
		
# Any left-over numbers are just plain numbers
"_number_([^_]++)_ ?%" <mapsTo> "_result_$1_<percent>_" .
"_number_([^_]++)_" <mapsTo> "_result_$1_xsd:decimal_" .

# Convert decimals to integer where possible
"_result_(-?\d++)_xsd:decimal_" <mapsTo> "_result_$1_xsd:integer_" .

# Important: Remove numbers that are clearly not numbers
"_result_(-?[0-9\.]+)[eE]\d{3,}" <mapsTo> "" .